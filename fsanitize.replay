➜  Webserv git:(tic-1) ✗ ./webserv _Config/default.conf
=================================================================
==289942==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffeb0af0e91 at pc 0x556aa1807088 bp 0x7ffeb0af0db0 sp 0x7ffeb0af0da0
READ of size 1 at 0x7ffeb0af0e91 thread T0
    #0 0x556aa1807087 in Config::isValidClientMaxBodySize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Directives&) _Config/Validators.cpp:179
    #1 0x556aa17f16f4 in Config::fillServerBlockDirectives(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ServerConfig&) _Config/ServerConstructor.cpp:126
    #2 0x556aa17ed5cc in Config::parseSingleServerBlock(int, int, ServerConfig&) _Config/ServerConstructor.cpp:43
    #3 0x556aa17ecce8 in Config::constructServers() _Config/ServerConstructor.cpp:22
    #4 0x556aa17e3a4b in Config::Config(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) _Config/Config.cpp:18
    #5 0x556aa185f1d1 in main /home/nazouz/Desktop/Webserv/main.cpp:24
    #6 0x7f00666a3d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58
    #7 0x7f00666a3e3f in __libc_start_main_impl ../csu/libc-start.c:392
    #8 0x556aa17e3764 in _start (/home/nazouz/Desktop/Webserv/webserv+0x12764)

Address 0x7ffeb0af0e91 is located in stack of thread T0 at offset 145 in frame
    #0 0x556aa1806b85 in Config::isValidClientMaxBodySize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Directives&) _Config/Validators.cpp:163

  This frame has 3 object(s):
    [32, 40) 'stringstop' (line 173)
    [64, 96) '<unknown>'
    [128, 160) '<unknown>' <== Memory access at offset 145 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-scope _Config/Validators.cpp:179 in Config::isValidClientMaxBodySize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Directives&)
Shadow bytes around the buggy address:
  0x100056156180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100056156190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1000561561a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1000561561b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1000561561c0: f1 f1 f1 f1 00 f2 f2 f2 f8 f8 f8 f8 f2 f2 f2 f2
=>0x1000561561d0: f8 f8[f8]f8 f3 f3 f3 f3 00 00 00 00 00 00 00 00
  0x1000561561e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1000561561f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100056156200: f1 f1 f1 f1 f8 f2 f2 f2 f8 f2 f2 f2 00 00 00 f2
  0x100056156210: f2 f2 f2 f2 f8 f8 f8 f2 f2 f2 f2 f2 f8 f8 f8 f2
  0x100056156220: f2 f2 f2 f2 f8 f8 f8 f2 f2 f2 f2 f2 00 00 00 f2
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==289942==ABORTING
